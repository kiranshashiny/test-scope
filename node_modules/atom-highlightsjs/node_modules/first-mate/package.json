{
  "_args": [
    [
      "first-mate@^5.0.0",
      "/Users/benjamincoe/bcoe/atom-highlights"
    ]
  ],
  "_from": "first-mate@>=5.0.0 <6.0.0",
  "_id": "first-mate@5.1.1",
  "_inCache": true,
  "_location": "/atom-highlightsjs/first-mate",
  "_nodeVersion": "4.2.1",
  "_npmUser": {
    "email": "nathan@github.com",
    "name": "nathansobo"
  },
  "_npmVersion": "3.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "first-mate",
    "raw": "first-mate@^5.0.0",
    "rawSpec": "^5.0.0",
    "scope": null,
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/atom-highlightsjs"
  ],
  "_resolved": "https://registry.npmjs.org/first-mate/-/first-mate-5.1.1.tgz",
  "_shasum": "41cda01ebb7fe060f71843e1bf3b325bca0a01f1",
  "_shrinkwrap": null,
  "_spec": "first-mate@^5.0.0",
  "_where": "/Users/benjamincoe/bcoe/atom-highlights",
  "bugs": {
    "url": "https://github.com/atom/first-mate/issues"
  },
  "dependencies": {},
  "description": "TextMate helpers",
  "devDependencies": {
    "coffee-script": "~1.7.0",
    "grunt": "~0.4.1",
    "grunt-atomdoc": "^1.0.0",
    "grunt-cli": "~0.1.8",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-peg": "~1.1.0",
    "grunt-shell": "~0.2.2",
    "jasmine-focused": "^1",
    "rimraf": "~2.1.4"
  },
  "directories": {},
  "dist": {
    "shasum": "41cda01ebb7fe060f71843e1bf3b325bca0a01f1",
    "tarball": "http://registry.npmjs.org/first-mate/-/first-mate-5.1.1.tgz"
  },
  "gitHead": "6eb5244971af8411d40ecc7e86a9c6efd3c2c50c",
  "homepage": "http://atom.github.io/first-mate",
  "installable": true,
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/first-mate/raw/master/LICENSE.md"
    }
  ],
  "main": "./lib/first-mate.js",
  "maintainers": [
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "zcbenz",
      "email": "zcbenz@gmail.com"
    },
    {
      "name": "probablycorey",
      "email": "probablycorey@gmail.com"
    },
    {
      "name": "nathansobo",
      "email": "nathan@github.com"
    },
    {
      "name": "benogle",
      "email": "ogle.ben@gmail.com"
    },
    {
      "name": "maxbrunsfeld",
      "email": "maxbrunsfeld@gmail.com"
    }
  ],
  "name": "first-mate",
  "optionalDependencies": {},
  "readme": "# First Mate [![Build Status](https://travis-ci.org/atom/first-mate.svg?branch=master)](https://travis-ci.org/atom/first-mate)\n\nTextMate helpers\n\n## Installing\n\n```sh\nnpm install first-mate\n```\n\n## Using\n\n### ScopeSelector\n\n```coffeescript\n{ScopeSelector} = require 'first-mate'\nselector = new ScopeSelector('a | b')\nselector.matches(['c']) # false\nselector.matches(['a']) # true\n```\n\n### GrammarRegistry\n\n```coffeescript\n{GrammarRegistry} = require 'first-mate'\nregistry = new GrammarRegistry()\ngrammar = registry.loadGrammarSync('./spec/fixtures/javascript.json')\n{line, tags} = grammar.tokenizeLine('var offset = 3;')\n# convert compact tags representation into convenient, space-inefficient tokens\ntokens = registry.decodeTokens(line, tags)\nfor {value, scopes} in tokens\n  console.log(\"Token text: '#{value}' with scopes: #{scopes}\")\n```\n\n#### loadGrammar(grammarPath, callback)\n\nAsynchronously load a grammar and add it to the registry.\n\n`grammarPath` - A string path to the grammar file.\n\n`callback` - A function to call after the grammar is read and added to the\nregistry.  The callback receives `(error, grammar)` arguments.\n\n#### loadGrammarSync(grammarPath)\n\nSynchronously load a grammar and add it to the registry.\n\n`grammarPath` - A string path to the grammar file.\n\nReturns a `Grammar` instance.\n\n#### scopeForId(id)\n\nTranslate an integer representing an open scope tag from a `tags` array to a\nscope name.\n\n`id` - A negative, odd integer.\n\nReturns a scope `String`.\n\n#### decodeTokens(line, tags)\n\nConvert a line and a corresponding tags array returned from\n`Grammar::tokenizeLine` into an array of token objects.\n\n`line` - A `String` representing a line of text.\n\n`tags` - An `Array` of integers returned from `Grammar::tokenizeLine`.\n\nReturns an `Array` of token objects, each with a `value` field containing a\nstring of the token's text and a `scopes` field pointing to an array of every\nscope name containing the token.\n\n### Grammar\n\n#### tokenizeLine(line, [ruleStack], [firstLine])\n\nGenerate the tokenize for the given line of text.\n\n`line` - The string text of the line.\n\n`ruleStack` - An array of Rule objects that was returned from a previous call\nto this method.\n\n`firstLine` - `true` to indicate that the very first line is being tokenized.\n\nReturns an object with a `tags` key pointing to an array of integers encoding\nthe scope structure of the line, a `line` key returning the line provided for\nconvenience, and a `ruleStack` key pointing to an array of rules to pass to this\nmethod on future calls for lines proceeding the line that was just tokenized.\n\nThe `tags` array encodes the structure of the line as integers for efficient\nstorage. This can be converted to a more convenient representation if storage\nis not an issue by passing the `line` string and `tags` array to `GrammarRegistry::decodeTokens`.\n\nOtherwise, the integers can be interpreted as follows:\n\n* Positive integers represent tokens, with the number indicating the length of\nthe token. All positive integers in the array should total to the length of the\nline passed to this method.\n\n* Negative integers represent scope start/stop tags. Odd integers are scope\nstarts, and even integers are scope stops. An odd scope tag can be converted to\na string via `GrammarRegistry::scopeForId`. If you want to convert an even scope\ntag, representing a scope end, add 1 to it to determine the corresponding scope\nstart tag before calling `::scopeForId`.\n\n#### tokenizeLines(text)\n\n`text` - The string text possibly containing newlines.\n\nReturns an object containing a `lines` key, pointing to an array of tokenized\nlines and a `tags` key, pointing to an array of tags arrays described above.\n\n## Developing\n\n  * Clone the repository\n  * Run `npm install`\n  * Run `npm test` to run the specs\n  * Run `npm run benchmark` to benchmark fully tokenizing jQuery 2.0.3 and\n    the CSS for Twitter Bootstrap 3.1.1\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/first-mate.git"
  },
  "scripts": {
    "benchmark": "coffee benchmark/benchmark.coffee",
    "prepublish": "grunt prepublish",
    "test": "grunt test"
  },
  "version": "5.1.1"
}
